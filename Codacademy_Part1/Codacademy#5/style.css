/* CSS : Class, ID, Div */
/* 자신과 다른 개발자를 위해 명확하고 유지 보수가 쉬운 HTML 코드를 작성하기 위한 기술적인 요소.
	Element에 대한 레이블이 있는 HTML 코드, CSS 코드를 구성하여	스타일의 지정을 특정 HTML element에 타겟팅하여 할 수 있다.
*/
/* ID : unique Element의 라벨링하는 속성
	HTML 파일 내 element에 id 속성을 사용하면 라벨링을 할 수 있다. 이 녀석만 타겟팅하여 스타일링하기 위함이다.
	ID 라벨링 된 element의 CSS 스타일링은 다음의 구조를 사용한다. 

	#ID_label {
		background-color: #56ABFF;
	}
	ID 라벨 이름을 Selector처럼 사용한다. 단, 앞에 #을 붙여서(공백 없이) ID임을 표시한다.
	
	ID 라벨링을 통한 CSS 스타일링은 한계가 있다. ID 라벨링은 HTML element들 중 단 하나만 지정할 수 있으므로,
	 특정 스타일을 공유해야하는 다수의 Element에 대해서는 적합하지 않다.
*/
 /* Class : 하나의 스타일링을 공유하는 여러 Element에 라벨링할 수 있는 속성
	 CSS 스타일링의 Class 구조를 생성해두면 HTML의 Element들은 Class 속성을 써서 이 Class의 CSS 스타일링을 그대로 사용할 수 있다.
	 같은 Class의 element들의 CSS 스타일링은 다음의 구조를 사용한다. 
	 
	 .Class_name {
		background-color: #56ABFF;
	}
	Class 이름을 Selector로써 사용하되, 앞에 .을 붙여서(공백 없이) Class임을 표시한다.
	Class Selctor들도 , 로 구분하여 여러 클래스들을 한 구조로 동시에 정의할 수 있다.(여러 element들의 스타일링을 하고자 할 때 좋다.)
*/
/*  Class Element 특정하기.
	
	<element1>.Class_name {
	Class_name <element2> { 
	
	기본적으로 <element> 부분이 비었을 경우 이 클래스를 사용하는 모든 Element에 대한 스타일링이다.
	<element1>에 특정 element가 있는 경우가 있다. 이 경우 element1들 중 이 클래스를 속성에 지정한 것들에 대해서만 스타일링을 적용한다.
	반대로 <element2>에 특정 element가 있는 경우가 있다. 이 경우는 이 클래스를 지정한 모든 element들 중에 예를 들어
	img같이 특정 element만 적용할 수 있는 스타일링을 추가할 경우, <element2> 부분에 그 element 이름을 명시하여 새로이 코딩한다.
 */
 /* 상속 : HTML element의 ID, Class 속성 사용
 
	<element_name id = "ID_name">
	<element_name class = "Class_name1 Class_name2 ...">

	element가 속성으로 id, class를 사용하여 스타일링 하는 것을 상속이라고 한다. 이 id, class의 이름은 라벨이라 부른다.
	HTML element에 클래스 속성 사용시 여러 클래스를 상속받을 수 있다. 그냥 value 안에서 공백 하나 두고 차례대로 나열하면 된다.
	HTML 요소는 여러 클래스를 상복받을 수 있지만 최대 네 개의 클래스로 제한하는 것이 좋다.
*/
/* Div : HTML 파일의 내용을 구성하는 가장 좋은 방법!!!
	Class와 ID는 Element를 스타일링하는 데 유용하며, 스타일링을 서로 연결하고 필요한 곳에만 특정하거나 하는데 아주 좋은 기법이다.
	그러나 Class와 ID가 혼란스럽고 과도하게 사용되면 HTML 파일을 읽기 어려울 수 있다.
	그래서 html 내 함께 소속되는 element들을 그룹화 하는 박스와 같은 Element, Div가 존재한다.
	
	<div>
		<h1>Alice In Wonderland</h1>
		<p> ... </p>
	</div>
	
	이렇게 하면 이 <div> ~~ </div> 내의 <h1> ~~ </h1>, <p> ~~ </p>는 하나의 그룹으로써 하나의 라벨링으로 CSS 스타일링 할 수 있다.
	div도 하나의 html element이므로 class 속성으로 라벨링 하여 CSS 스타일링이 가능하다.
	
	<div class="container">
		<h1 class="title">Alice In Wonderland</h1>
		<p> ... </p>
	</div>
	
	이 경우 <h1> ~~ </h1>, <p> ~~ </p> 는 container class의 스타일링이 적용된다. 
	또한 <h1> ~~ </h1>은 추가로 title class의 스타일링도 적용된다.(container, title class 동시에 상속)
	
	또한 div 자체를 CSS seletor로써 직접 CSS 스타일링 할 수도 있다.  
*/
/* 정리 : 
	CSS 파일에 CSS 스타일링의 구조체를 만들어서 html element에 객체를 생성, 상속하는 방식으로 스타일링하는 기법은 ID, Class가 있다.
	ID의 경우 HTML에서 단 하나의 element만이 상속을 받아 스타일을 적용할 수 있다.
	Class의 경우 다수의 element들에 class 상속을 받아 동일한 스타일을 적용할 수 있고, 한 element가 여러 클래스를 다중 상속할 수도 있다.
	또한 element의 특정이 자유롭다.

	HTML 파일에서 element들의 조직적인 구조체를 구성해서 CSS 파일에 이 조직의 스타일링을 따로 적용시키는 기법은 Div element이다.
	Div로 HTMl 코드의 부분 부분을 구조체로써 묶어서 id, class를 상속 받아 구조체 통째로 스타일링 적용이 가능하다.
	또한 Div 자체가 Selctor로써 스타일링 될 수도 있다. 
	Nested Div는 활용되는 범위도 넓고 웹 프로그래밍에 일반적으로 많이 쓰인다.
*/
	
	body {
	  background-color: #FFF;
	  margin: 0;
	  padding: 0;
	}

/* header라는 클래스의 스타일링. html에서 "header"를 클래스 속성 값으로 쓰면 해당 element는 이 header 스타일링을 상속받는다. */
	.header {
	  background-image: url("https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-5/htmlcss1-img_canyon.jpeg");
	  background-position: center center;
	  background-size: cover;
	  height: 700px;
	  width: 100%;
	}
/* header-text라는 id의 스타일링. html에서 "header"를 id 속성 값으로 쓰면 이 element는 유일하게! 이 header-text 스타일링을 상속받는다. */
	#header-text {
	  margin: 0 auto;
	  position: relative;
	  text-align: center;
	  top: 25%;
	  width: 60%;
	}
/* element를 Selctor로 하는 일반 CSS 스타일링 */
	h1 {
	  color: #FFF;
	  font-family: 'Quicksand', sans-serif;
	  font-size: 70px;
	  font-weight: 400;
	  line-height: 60px;
	  margin: 0;
	}

	h2 {
	  color: #FFF;
	  font-family: 'Open Sans', sans-serif;
	  text-align: center;
	  font-size: 28px;
	  font-weight: 100;
	}

	h3 {
	  color: #FFF;
	  font-family: 'Quicksand', sans-serif;
	  font-size: 28px;
	  font-weight: 400;
	  line-height: 30px;
	  margin: 10px 0px;
	  text-align: center;
	}

	h4 {
	  color: #CCC;
	  font-family: 'Quicksand', sans-serif;
	  font-size: 16px;
	  font-weight: 300;
	}

	p {
	  color: white;
	  font-family: 'Open Sans', sans-serif;
	  font-size: 16px;
	  font-weight: 100;
	  line-height: 24px;
	  margin: 0 auto;
	  text-align: center;
	  width: 60%;
	}

	.partner {
	  padding: 20px;
	  margin: 0 auto;
	  border-bottom: 1px solid #EEE;
	}
/* Class를 상속받는 Element 특정하기. partner 클래스를 상속받는 element들 중 img element는 이 CSS 스타일링을 추가로 상속받는다. */
	.partner img {
	  position: relative;
	  top: 6px;
	}

	.aa-logo {
	  padding-left: 6px;
	}

	.main {
	  background: url("https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-5/shards.png");
	  margin: 0;
	  padding: 40px;
	}

	.value-props {
	  margin: 40px auto;
	  width: 60%;
	}

	.prop {
	  border: 1px solid #FFF;
	  padding: 40px 0px;
	  margin: 5px 0px;
	}
/* Class를 상속받는 Element 특정하기. prop 클래스를 상속받는 element들 중 h2 element는 이 CSS 스타일링을 추가로 상속받는다. */
	.prop h2 {
	  font-family: 'Quicksand', sans-serif;
	  font-size: 24px;
	}
/* Class도 하나의 Selctor이므로, Class Selctor들도 , 로 구분하여 여러 클래스들을 한 스타일로 중복하여 정의할 수 있다. */
	.partner, .prop {
	  text-align : center;
	}
		
		
		
	
	